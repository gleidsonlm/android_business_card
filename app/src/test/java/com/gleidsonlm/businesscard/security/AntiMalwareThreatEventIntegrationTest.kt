package com.gleidsonlm.businesscard.security

import com.gleidsonlm.businesscard.model.ThreatEventData
import org.junit.Before
import org.junit.Test

/**
 * Integration test to validate all new Anti-Malware threat event handlers.
 */
class AntiMalwareThreatEventIntegrationTest {

    private lateinit var detectUnlockedBootloaderHandler: DetectUnlockedBootloaderHandler
    private lateinit var kernelSUDetectedHandler: KernelSUDetectedHandler
    private lateinit var osRemountDetectedHandler: OsRemountDetectedHandler
    private lateinit var injectedShellCodeDetectedHandler: InjectedShellCodeDetectedHandler
    private lateinit var unauthorizedAIAssistantDetectedHandler: UnauthorizedAIAssistantDetectedHandler
    private lateinit var hookFrameworkDetectedHandler: HookFrameworkDetectedHandler
    private lateinit var magiskManagerDetectedHandler: MagiskManagerDetectedHandler
    private lateinit var fridaDetectedHandler: FridaDetectedHandler
    private lateinit var fridaCustomDetectedHandler: FridaCustomDetectedHandler
    private lateinit var sslIntegrityCheckFailHandler: SslIntegrityCheckFailHandler
    private lateinit var malwareInjectionDetectedHandler: MalwareInjectionDetectedHandler

    @Before
    fun setUp() {
        detectUnlockedBootloaderHandler = DetectUnlockedBootloaderHandler()
        kernelSUDetectedHandler = KernelSUDetectedHandler()
        osRemountDetectedHandler = OsRemountDetectedHandler()
        injectedShellCodeDetectedHandler = InjectedShellCodeDetectedHandler()
        unauthorizedAIAssistantDetectedHandler = UnauthorizedAIAssistantDetectedHandler()
        hookFrameworkDetectedHandler = HookFrameworkDetectedHandler()
        magiskManagerDetectedHandler = MagiskManagerDetectedHandler()
        fridaDetectedHandler = FridaDetectedHandler()
        fridaCustomDetectedHandler = FridaCustomDetectedHandler()
        sslIntegrityCheckFailHandler = SslIntegrityCheckFailHandler()
        malwareInjectionDetectedHandler = MalwareInjectionDetectedHandler()
    }

    private fun createThreatEventData(threatCode: String): ThreatEventData {
        return ThreatEventData(
            deviceID = "test-device",
            threatCode = threatCode,
            defaultMessage = "Test threat detected",
            internalError = null,
            timeStamp = "2023-01-01T00:00:00Z",
            deviceModel = "TestDevice",
            osVersion = "13",
            kernelInfo = "test-kernel",
            deviceManufacturer = "TestManufacturer",
            fusedAppToken = "test-token",
            carrierPlmn = "test-plmn",
            deviceBrand = "test-brand",
            deviceBoard = "test-board",
            buildHost = "test-host",
            buildUser = "test-user",
            sdkVersion = "33",
            message = "Test message",
            failSafeEnforce = "true",
            externalID = "test-external-id",
            reasonCode = "001",
            buildDate = "2023-01-01",
            devicePlatform = "android",
            carrierName = "TestCarrier",
            updatedOSVersion = "13.1",
            timeZone = "UTC",
            deviceFaceDown = "false",
            locationLong = "0.0",
            locationLat = "0.0",
            locationState = "TestState",
            wifiSsid = "test-wifi",
            wifiSsidPermissionStatus = "granted"
        )
    }

    @Test
    fun `all anti-malware handlers process threat events without errors`() {
        // Test each handler with corresponding threat event data
        val testCases = listOf(
            "UNLOCKED_BOOTLOADER" to detectUnlockedBootloaderHandler::handleDetectUnlockedBootloaderEvent,
            "KERNELSU_DETECTED" to kernelSUDetectedHandler::handleKernelSUDetectedEvent,
            "OS_REMOUNT_DETECTED" to osRemountDetectedHandler::handleOsRemountDetectedEvent,
            "INJECTED_SHELL_CODE" to injectedShellCodeDetectedHandler::handleInjectedShellCodeDetectedEvent,
            "UNAUTHORIZED_AI_ASSISTANT" to unauthorizedAIAssistantDetectedHandler::handleUnauthorizedAIAssistantDetectedEvent,
            "HOOK_FRAMEWORK_DETECTED" to hookFrameworkDetectedHandler::handleHookFrameworkDetectedEvent,
            "MAGISK_MANAGER_DETECTED" to magiskManagerDetectedHandler::handleMagiskManagerDetectedEvent,
            "FRIDA_DETECTED" to fridaDetectedHandler::handleFridaDetectedEvent,
            "FRIDA_CUSTOM_DETECTED" to fridaCustomDetectedHandler::handleFridaCustomDetectedEvent,
            "SSL_INTEGRITY_CHECK_FAIL" to sslIntegrityCheckFailHandler::handleSslIntegrityCheckFailEvent,
            "MALWARE_INJECTION_DETECTED" to malwareInjectionDetectedHandler::handleMalwareInjectionDetectedEvent
        )

        // When & Then - all handlers should process without throwing exceptions
        testCases.forEach { (threatCode, handler) ->
            val threatEventData = createThreatEventData(threatCode)
            handler.invoke(threatEventData)
        }
    }

    @Test
    fun `all anti-malware handlers handle null data gracefully`() {
        val nullThreatEventData = ThreatEventData(
            deviceID = null,
            threatCode = null,
            defaultMessage = null,
            internalError = null,
            timeStamp = null,
            deviceModel = null,
            osVersion = null,
            kernelInfo = null,
            deviceManufacturer = null,
            fusedAppToken = null,
            carrierPlmn = null,
            deviceBrand = null,
            deviceBoard = null,
            buildHost = null,
            buildUser = null,
            sdkVersion = null,
            message = null,
            failSafeEnforce = null,
            externalID = null,
            reasonCode = null,
            buildDate = null,
            devicePlatform = null,
            carrierName = null,
            updatedOSVersion = null,
            timeZone = null,
            deviceFaceDown = null,
            locationLong = null,
            locationLat = null,
            locationState = null,
            wifiSsid = null,
            wifiSsidPermissionStatus = null
        )

        // When & Then - all handlers should handle null data gracefully
        detectUnlockedBootloaderHandler.handleDetectUnlockedBootloaderEvent(nullThreatEventData)
        kernelSUDetectedHandler.handleKernelSUDetectedEvent(nullThreatEventData)
        osRemountDetectedHandler.handleOsRemountDetectedEvent(nullThreatEventData)
        injectedShellCodeDetectedHandler.handleInjectedShellCodeDetectedEvent(nullThreatEventData)
        unauthorizedAIAssistantDetectedHandler.handleUnauthorizedAIAssistantDetectedEvent(nullThreatEventData)
        hookFrameworkDetectedHandler.handleHookFrameworkDetectedEvent(nullThreatEventData)
        magiskManagerDetectedHandler.handleMagiskManagerDetectedEvent(nullThreatEventData)
        fridaDetectedHandler.handleFridaDetectedEvent(nullThreatEventData)
        fridaCustomDetectedHandler.handleFridaCustomDetectedEvent(nullThreatEventData)
        sslIntegrityCheckFailHandler.handleSslIntegrityCheckFailEvent(nullThreatEventData)
        malwareInjectionDetectedHandler.handleMalwareInjectionDetectedEvent(nullThreatEventData)
    }
}